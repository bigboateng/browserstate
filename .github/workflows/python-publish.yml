name: Python Package Version Bump, Build and Publish to PyPI

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      version_override:
        description: 'Override version (leave empty to auto-increment)'
        required: false
        type: string
      publish_to_pypi:
        description: 'Publish to PyPI'
        required: true
        default: false
        type: boolean

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Needed to create branches and PRs
      pull-requests: write # Needed to create pull requests
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # We need the full history for versioning
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build hatch semver wheel twine
    
    - name: Set Git identity
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
    
    - name: Update version based on release type
      id: version
      run: |
        cd python
        
        # Get current version from pyproject.toml
        CURRENT_VERSION=$(grep -m 1 'version = ' pyproject.toml | cut -d'"' -f2 || echo "0.0.0")
        echo "Current version: $CURRENT_VERSION"
        
        if [ -n "${{ github.event.inputs.version_override }}" ]; then
          # Use the manually specified version
          NEW_VERSION="${{ github.event.inputs.version_override }}"
          echo "Using manual version override: $NEW_VERSION"
        else
          # Calculate new version based on release type
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          if [ "$RELEASE_TYPE" == "patch" ]; then
            NEW_VERSION=$(python -c "import semver; print(semver.VersionInfo.parse('$CURRENT_VERSION').bump_patch())")
          elif [ "$RELEASE_TYPE" == "minor" ]; then
            NEW_VERSION=$(python -c "import semver; print(semver.VersionInfo.parse('$CURRENT_VERSION').bump_minor())")
          elif [ "$RELEASE_TYPE" == "major" ]; then
            NEW_VERSION=$(python -c "import semver; print(semver.VersionInfo.parse('$CURRENT_VERSION').bump_major())")
          else
            NEW_VERSION="$CURRENT_VERSION"
          fi
          echo "Calculated new $RELEASE_TYPE version: $NEW_VERSION"
        fi
        
        # Update version in pyproject.toml
        sed -i "s/version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" pyproject.toml
        
        # Set output variable for later steps
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
    
    - name: Build package
      run: |
        cd python
        python -m build
        echo "Package built successfully. Output in dist/ directory."
    
    - name: Create branch for version update
      run: |
        # Create a new branch for the version update
        BRANCH_NAME="python-version-${{ steps.version.outputs.new_version }}"
        git checkout -b $BRANCH_NAME
        
        # Add and commit changes
        git add python/pyproject.toml
        git commit -m "Bump Python package version to ${{ steps.version.outputs.new_version }}"
        
        # Push the branch
        git push -u origin $BRANCH_NAME
        
        echo "branch_name=$BRANCH_NAME" >> $GITHUB_ENV
    
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "Bump Python package version to ${{ steps.version.outputs.new_version }}"
        title: "Bump Python package version to ${{ steps.version.outputs.new_version }}"
        body: |
          This PR updates the Python package version to ${{ steps.version.outputs.new_version }}
          
          ### Installation Instructions
          ```bash
          pip install git+https://github.com/browserstate-org/browserstate@python-v${{ steps.version.outputs.new_version }}#subdirectory=python
          # Or with uv
          uv pip install git+https://github.com/browserstate-org/browserstate@python-v${{ steps.version.outputs.new_version }}#subdirectory=python
          ```
        branch: ${{ env.branch_name }}
        base: main
        labels: python,version-bump,automated-pr
    
    - name: Create tag 
      run: |
        # Only create tag if we haven't already tagged this version
        if ! git rev-parse "python-v${{ steps.version.outputs.new_version }}" >/dev/null 2>&1; then
          TAG_NAME="python-v${{ steps.version.outputs.new_version }}"
          git tag $TAG_NAME
          git push origin $TAG_NAME
        else
          echo "Tag python-v${{ steps.version.outputs.new_version }} already exists, skipping tag creation"
        fi
    
    - name: Publish to PyPI
      if: ${{ github.event.inputs.publish_to_pypi == 'true' }}
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        set -e  # Exit immediately if a command exits with a non-zero status
        cd python
        
        # Verify distribution files exist
        if [ ! "$(ls -A dist)" ]; then
          echo "‚ùå Error: No distribution files found in dist/ directory"
          exit 1
        fi
        
        # Validate the package before uploading
        echo "üîç Validating the package before uploading..."
        twine check dist/*
        
        # Upload to PyPI with proper error handling
        echo "üì¶ Uploading to PyPI..."
        if ! python -m twine upload dist/*; then
          echo "‚ùå Failed to upload package to PyPI"
          exit 1
        fi
        
        echo "üöÄ Package published to PyPI successfully!"
    
    - name: Update installation instructions
      run: |
        echo "::notice::Python package version ${{ steps.version.outputs.new_version }} built successfully!"
        echo "::notice::Pull request created to update version in main branch"
        
        if [ "${{ github.event.inputs.publish_to_pypi }}" == "true" ]; then
          echo "::notice::üì¶ Package published to PyPI!"
          echo "::notice::Installation Instructions:"
          echo "::notice::pip install browserstate==${{ steps.version.outputs.new_version }}"
          echo "::notice::uv pip install browserstate==${{ steps.version.outputs.new_version }}"
        else
          echo "::notice::Installation Instructions from GitHub:"
          echo "::notice::pip install git+https://github.com/browserstate-org/browserstate@python-v${{ steps.version.outputs.new_version }}#subdirectory=python"
          echo "::notice::uv pip install git+https://github.com/browserstate-org/browserstate@python-v${{ steps.version.outputs.new_version }}#subdirectory=python"
        fi 